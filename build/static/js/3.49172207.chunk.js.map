{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","components/pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","setIsEntering","authorInputRef","useRef","textInputRef","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","navigate","useNavigate","useHttp","addQuote","sendRequest","status","useEffect","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,mB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2B,0GCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAK,SAAEH,EAAMI,UAC9C,E,yBCyEeC,EAtEG,SAACL,GACjB,MAAmCM,oBAAS,GAAM,mBAAhCC,GAAF,KAAe,MACzBC,EAAiBC,mBACjBC,EAAeD,mBA8BrB,OACE,mCAOE,cAAC,EAAI,UACH,uBACEE,QApBmB,WAOzBJ,GAAc,EAChB,EAaQN,UAAWC,IAAQU,KACnBC,SAxCR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBR,EAAeS,QAAQC,MACvCC,EAAcT,EAAaO,QAAQC,MAIzClB,EAAMoB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,GAClD,EA+BoC,UAE3BnB,EAAMuB,WACL,qBAAKtB,UAAWC,IAAQsB,QAAQ,SAC9B,cAACC,EAAA,EAAc,MAInB,sBAAKxB,UAAWC,IAAQwB,QAAQ,UAC9B,uBAAOC,QAAQ,SAAQ,oBACvB,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKtB,OAEtC,sBAAKP,UAAWC,IAAQwB,QAAQ,UAC9B,uBAAOC,QAAQ,OAAM,kBACrB,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKpB,OAEpC,qBAAKT,UAAWC,IAAQ8B,QAASC,QA7CX,WAK5B1B,GAAc,EAChB,EAuCwE,SAC9D,wBAAQN,UAAU,MAAK,+BAMnC,EC3CeiC,UAzBE,WAIf,IAAMC,EAAWC,cACjB,EAAgCC,YAAQC,KAAhCC,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAErBC,qBAAU,WACO,cAAXD,GACFL,EAAS,UAEb,GAAG,CAACK,EAAQL,IAMZ,OACE,cAAC,EAAS,CACRZ,UAAsB,YAAXiB,EACXpB,WAPoB,SAACsB,GACvBH,EAAYG,EACd,GAQF,C","file":"static/js/3.49172207.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEntered, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const finishEnteringHandler = () => {\n    // form 작성을 완료하여 이 페이지를 나갈 경우\n    // submit handler에 작성하는 것은 이미 늦음.\n    // 버튼에 상태 변경 로직을 작성해야 양식 제출 전 트리거가 된다!\n    // 동기식으로 실행되기 때문\n    setIsEntering(false);\n  };\n  const formFocusedHandler = () => {\n    /* Prompt : 렌더링할 수 있는 컴포넌트로 사용자가 다른곳으로 이동할 때 자동으로 감시한다.\n    -  그리고 특정 조건이 충족되면 떠나기전 경고를 표시해준다\n    - prop\n      - when : 사용자가 URL을 변경하는 경우 이 프롬프트가 표시되어야 하는지 여부를 찾기위해 true/false를 전달한다.\n      - message: 사용자가 나가려고할 때 보여주고 싶은 메세지를 반환하는 함수를 설정한다.\n    */\n    setIsEntering(true);\n  };\n\n  return (\n    <>\n      {/* <Prompt\n        when={isEntered}\n        message={(location) =>\n          \"정말로 페이지를 나가시겠습니까? 이 페이지를 나갈 경우 작성한 데이터가 사라집니다.\"\n        }\n      /> */}\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions} onClick={finishEnteringHandler}>\n            <button className=\"btn\">Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addQuote } from \"../../lib/api\";\n\nimport QuoteForm from \"../quotes/QuoteForm\";\n\nconst NewQuote = () => {\n  // 브라우저 기록을 변경시킬 수 있음, 페이지 stack에 쌓임\n  // push(): back버튼을 사용하여 이전 페이지로 이동가능 -> 새 페이지 추가와 같음\n  // replace(): back버튼을 사용하여 이전 페이지로 이동할 수 없음!! -> redirection과 같음\n  const navigate = useNavigate();\n  const { sendRequest, status } = useHttp(addQuote);\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      navigate(\"/quotes\");\n    }\n  }, [status, navigate]);\n\n  const addQuoteHandler = (quoteData) => {\n    sendRequest(quoteData);\n  };\n\n  return (\n    <QuoteForm\n      isLoading={status === \"pending\" ? true : false}\n      onAddQuote={addQuoteHandler}\n    />\n  );\n};\n\nexport default NewQuote;\n"],"sourceRoot":""}